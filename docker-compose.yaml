version: "3.9"
services:
  redis:
    container_name: redis_container
    image: redis:alpine
    restart: always
    ports:
      - "6379:6379"
    command: redis-server --loglevel warning
    volumes:
      - ./docker-volumes/cache:/data
  mongodb:
    container_name: mongodb_container
    image: mongo:latest
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - ./docker-volumes/mongo:/data/db
    # For the development we can use username and password but for now we don't need that 
    # environment:
    #   MONGO_INITDB_ROOT_USERNAME: "root"
    #   MONGO_INITDB_ROOT_PASSWORD: "example"
  mysql:
    container_name: mysql_container
    image: mysql:latest
    restart: always
    ports:
      - "3306:3306"
    environment:
      - MYSQL_USER=jeral
      - MYSQL_PASSWORD=1234
      - MYSQL_DATABASE=jobber_auth_db
      - MYSQL_ROOT_PASSWORD=1234
    volumes:
      - ./docker-volumes/mysql:/var/lib/mysql
  postgres:
    container_name: postgres_container
    image: postgres:latest
    restart: always
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=jeral
      - POSTGRES_PASSWORD=1234
      - POSTGRES_DB=jobber_reviews_db
    volumes:
      - ./docker-volumes/postgres:/var/lib/postgresql
  rabbitmq:
    container_name: rabbitmq_container
    image: rabbitmq:3-management
    restart: always
    ports:
      # AMQP Protocol
      - "5672:5672"
      # Management console Protocol
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=jeral
      - RABBITMQ_DEFAULT_PASS=1234
  elasticsearch:
    container_name: elasticsearch_container
    image: docker.elastic.co/elasticsearch/elasticsearch-wolfi:9.1.3
    restart: always
    environment:
      ES_JAVA_OPTS: -Xmx1g -Xms1g
      bootstrap.memory_lock: "true"
      discovery.type: single-node
      network.host: 0.0.0.0
      transport.host: 127.0.0.1
      http.host: 0.0.0.0
      xpack.security.enabled: "true"
      xpack.security.authc.api_key.enabled: "true"
      xpack.monitoring.collection.enabled: "true"
      xpack.security.enrollment.enabled: "true"
      xpack.security.authc.token.enabled: "true"
      ELASTIC_PASSWORD: admin1234
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - ./docker-volumes/elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - elastic
  kibana:
    container_name: kibana_container
    image: docker.elastic.co/kibana/kibana:9.1.3
    restart: always
    environment:
      - ELASTICSEARCH_HOSTS=["http://elasticsearch_container:9200"]
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=kibana
      - ELASTICSEARCH_SERVICEACCOUNT_TOKEN=AAEAAWVsYXN0aWMva2liYW5hL2pvYmJlci1raWJhbmE6U3EtdVRVWGZSUHljNXRzbGVLdmduZw
      - XPACK_FLEET_AGENTS_ELASTICSEARCH_HOSTS=["http://elasticsearch_container:9200"]
    ports:
      - 5601:5601
    networks:
      - elastic
    volumes:
      - ./kibana.yaml:/usr/share/kibana/config/kibana.yml:ro
    depends_on: 
      - elasticsearch
  notifications:
    container_name: notifications_container
    build:
      context: "C:/Custom Downloads/notification_service"
      dockerfile: Dockerfile.dev
    restart: always
    ports:
      - "4001:4001"
    env_file:
    - "C:/Custom Downloads/notification_service/.env"
    environment:
      - ENABLE_APM=0
      - NODE_ENV=development
      - CLIENT_URL=http://localhost:3000
      - RABBITMQ_ENDPOINT=amqp://jeral:1234@rabbitmq_container:5672
      - SENDER_EMAIL=krystal.smith@ethereal.email
      - SENDER_EMAIL_PASSWORD=VUTDZK226ZRA1st2qY
      - ELASTIC_SEARCH_URL=http://elastic:admin1234@elasticsearch_container:9200
      - ELASTIC_APM_SERVER_URL=http://localhost:8200
      - ELASTIC_APM_SECRET_TOKEN=
    depends_on:
      - elasticsearch

networks:
  elastic:
    name: elastic